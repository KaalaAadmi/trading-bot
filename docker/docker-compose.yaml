services:
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: timescaledb
    networks:
      - trading_bot_network
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: bot_user
      POSTGRES_PASSWORD: bot_password
      POSTGRES_DB: trading_bot
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ../db/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: always

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - trading_bot_network
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: trading-bot-zookeeper
    networks:
      - trading_bot_network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: trading-bot-kafka
    networks:
      - trading_bot_network
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"

  prometheus:
    image: prom/prometheus:latest
    container_name: trading-bot-prometheus
    networks:
      - trading_bot_network
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yaml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml" # Path to the config file
      - "--storage.tsdb.retention.time=90d" # Retain metrics for 90 days
      - "--storage.tsdb.path=/prometheus" # Path to store metrics

  grafana:
    image: grafana/grafana:latest
    container_name: trading-bot-grafana
    networks:
      - trading_bot_network
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    restart: always
    env_file:
      - ../.env

  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis_exporter
    networks:
      - trading_bot_network
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis:6379
    restart: always

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: trading-bot-postgres-exporter
    networks:
      - trading_bot_network
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:${POSTGRES_PORT}/trading_bot?sslmode=disable"
    restart: always
    env_file:
      - ../.env

volumes:
  timescaledb_data:
  grafana_data:
  redis_data:

networks:
  trading_bot_network:
